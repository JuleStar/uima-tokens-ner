/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.3/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'maven-publish'

group = 'fr.univ-nantes.julestar'
archivesBaseName = 'uima-tokens-ner'
description = 'A named entity recognition engine based on UIMA Tokens regex'
version = '0.1'

// generate gradle wrapper
task wrapper(type: Wrapper) {
    gradleVersion = '3.0' //we want gradle 3.0 to run this project
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    mavenLocal()
    jcenter()
}

configurations {
	prepare.extendsFrom(compile)
}


// do not fail on tag @generated added by uimaj JcasGen
javadoc{
	options {
		failOnError = true
		encoding "UTF-8"
		docEncoding "UTF-8"
		charSet "UTF-8"
	}
}

// Remove javadoc warnings
tasks.withType(Javadoc) {
  options.addStringOption('Xdoclint:none', '-quiet')
}


dependencies {
    // The production code uses Guava
    compile 'com.google.guava:guava:21.0'
	compile 'org.apache.uima:uimaj-core:2.10.0'
	compile "org.apache.uima:uimafit-core:2.3.0"
	compile 'com.google.guava:guava:21.0'
	compile 'fr.univ-nantes.julestar:uima-tokens-regex:1.4'
	compile 'fr.univ-nantes.termsuite:termsuite-core:3.0.4'
	
    // Use JUnit test framework
    testCompile 'junit:junit:4.12'
	testCompile "fr.univ-nantes.julestar:uima-test:1.0.0"
    
	// JCas type generation
	prepare "org.apache.uima:uimaj-tools:2.8.1"
}


task jcasgen(type: JavaExec) {
	description = 'Generate UIMA TS classes'
	ext.srcFile = file("$projectDir/src/main/resources/TokensNER_TS.xml")
	ext.outputDir = file("$projectDir/src/main/java")
	inputs.file srcFile
	outputs.dir outputDir
	classpath configurations.prepare
	// This ensures availability of type system imports
	// however, assumes that files are in desc subfolder
	systemProperty 'uima.datapath', "$projectDir/desc"
	main = 'org.apache.uima.tools.jcasgen.Jg'
	args = ['-jcasgeninput', srcFile, '-jcasgenoutput', outputDir]
}


// UIMA type system is needed for Java compile
compileJava.source jcasgen.outputs, sourceSets.main.java


task javadocJar(type: Jar) {
	classifier = 'javadoc'
	from javadoc
}

task sourcesJar(type: Jar) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

artifacts {
	archives javadocJar, sourcesJar
}

if(hasProperty("signing.keyId")) {
	// activate signing of artifacts, only if signing is configured properly
	signing {
		sign configurations.archives
	}
}


publishing {
	publications {
		maven(MavenPublication) {
			groupId group
			artifactId archivesBaseName
			version version

			from components.java
		}
	}
}

if(hasProperty("ossrh.username")) {
	uploadArchives {
		repositories {
		  mavenDeployer {
			beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
	
			repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
			  authentication(userName: project.getProperty("ossrh.username"), password: project.getProperty("ossrh.password"))
			}
	
			snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
			  authentication(userName: project.getProperty("ossrh.username"), password: project.getProperty("ossrh.password"))
			}
	
			pom.project {
			  name archivesBaseName
			  packaging 'jar'
			  // optionally artifactId can be defined here
			  description getProperty("description")
			  url 'https://github.com/JuleStar/uima-tokens-ner'
	
			  scm {
				  connection 'scm:git:git@github.com:julestar/uima-tokens-ner.git'
				  developerConnection 'scm:git:git@github.com:julestar/uima-tokens-ner.git'
				  url 'git@github.com:julestar/uima-tokens-ner.git'
			  }
	
			  licenses {
				  license {
					  name 'The Apache License, Version 2.0'
					  url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
				  }
			  }
	
			  developers {
				  developer {
					  id getProperty("developer.id")
					  name getProperty("developer.name")
					  email getProperty("developer.email")
				  }
			  }
			}
		  }
		}
	}
} else {
	def msg = "Publishing to maven central (task uploadArchives) is not possible since no gradle property file is found (use \"\$ cp gradle.properties.sample gradle.properties\")"
	logger.warn(msg)
}

